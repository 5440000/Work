# непонятно откуда взялась эта задача!!!!




# Задание со звездочкой:
# Дан список числе, например:
# lst = [88, 90, 77, 55, 6, 42, 9, 28, 88, 18, 33, 36, 23, 81, 30, 54.2, 37, 46, 34, 20, 22, 54, 87, 73, 17, 52, 57, 61, 55, 5, 61, 51, 53, 20, 5, 29, 13, 42, 35, 15, '15.2', 60, 32, 81, 63, 49, 73, 77, 23, 91, 1, 48, 33, 35, 70, 7, 10, 33, 3, 7, 46, 66, 16, 4, 60, 65, 43, 28, 35, 26, 84, 84, 88, 48, 63, 6, 61, 15, 70, 57, 64, 77, None, 33, 30, 24, 65, 55, 100, 22, 47, 44, 64, 94, 76, 19, 74, 85, 37, 41, 95, 18]
# Необходимо написать функцию, которая будет принимать в качестве аргумента список и возвращать число,
# которое равняется длине наиболее длинной последовательности чисел в возрастающем порядке.
# Пример
# lst = [0, 2, 1, 6, 8, 3, 14, 5]
# верный результат 5, верный список: [0, 2, 6, 8, 14]

#                                             2

# 4. Необходимо написать программу, которая на входе будет принимать строку,
# а выводить ее на экран будет первые двадцать символов
# (если эта длинна разрывает слово, то необходимо печатать слово целиком),
# затем продолжать на новой строке и делать 4 отступа вначале и снова двадцать символов.
# Так необходимо выводить всю фразу целиком. Обрывать слова нельзя.
#s = input('введите строку')
#print(s([0],[20], ))

#for i in s:
 #   if
#Hi my name is Pavel!!!!!!!!!!!!!!!!! I'm glad to see you here! What do you think about this?
#\s - пробел
end = ' '
#while True:
#    if s[20] == end:
#        print(s[0:20])


# 5. Необходимо написать программу, которая будет принимать
# в качестве первого аргумента число — количество необходимых результатов,
# второго - список чисел.
# Программа должна искать переданное в качестве первого количество результатов с наиболее высокими показателями
# из переданного в качестве второго аргумента списка.
# Стоить принимать во внимание, что в списке могут быть переданы числа с плавающей точкой и какой-то текст.
# Например:
# a = 2
# b = [20, 58, 9, 23, 62, 46, 48, 55, 95, 68, 2, 2, 50, 76, 14, 92, 12, 71, 12, 30]
# результат: 92, 95

#n = input('ведите число')
#s = input('ведите cсписок')


# 8. Необходимо написать программу, которая в качестве первого аргумента принимает список упорядоченных уникальных чисел.
# С каждым циклом каждое число исключает соседа и передает "право исключения" следующему числу по принципу:
# список - [1, 2, 3, 4, 5, 6]. 1 исключает 2, 2 пропускается, так как исключено.
# 3 исключает 4, 5 исключает 6 - цикл закончен и так до тех пор, пока не останется одно число.
# Необходимо вывести это число.
# Полный пример:
# [1, 2, 3, 4, 5, 6] - 1 исключает 2, 3 исключает 4, 5 исключает 6, цикл закончен.
# [1, 3, 5] - 1 исключает 3, 5 исключает 1 (так как нечетное количество), цикл закончен.
# [5] - результат.
#
# *9. Необходимо написать программу, которая в качестве первого аргумента принимает три числа. Из первых двух генерирует последовательность чисел, в которой каждое последующее число равно сумме двух предыдущих и проверяет, входит ли третье число в этот ряд.
# Например:
# Ввод: 3, 5, 53316291173 (
# Образованный ряд: [8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173]
# Число 53316291173 входит в генерируемый ряд, следовательно, True, во всех других случаях False.
#
#
#                                                 3
# Задания:
# 1. Написать программу, которая будет выводить первый и последний элемент списка:
# ['Email:', 'SSN:','Address:','Home Phone:','Mobile Phone: ','DOB:','Date of Surgery:','Date of Service:','Facility of Service:','Clinic Number:','Employer:','Work Phone: ','Fax: ','Type:','IPA:','Health Plan:','ID #:','Claims Address:','Group #:','Claim # / PO #:','Phone:','Fax:','Contact','Adjuster Email','Util Review Phone','Util Review Fax','Doctor:','NPI #: ','Date of Injury: ','Body Parts:','Body Part Side:','Gender:','Diagnosis:','Diagnosis 2:','Procedure:']
#
# 2. Написать программу, которая будет выводить предпоследний элемент списка:
# ['Email:', 'SSN:','Address:','Home Phone:','Mobile Phone: ','DOB:','Date of Surgery:','Date of Service:','Facility of Service:','Clinic Number:','Employer:','Work Phone: ','Fax: ','Type:','IPA:','Health Plan:','ID #:','Claims Address:','Group #:','Claim # / PO #:','Phone:','Fax:','Contact','Adjuster Email','Util Review Phone','Util Review Fax','Doctor:','NPI #: ','Date of Injury: ','Body Parts:','Body Part Side:','Gender:','Diagnosis:','Diagnosis 2:','Procedure:']
#
# 3. Написать программу, которая принимает на входе число n и выводит на экран n + nn - nnn * nnnn, пример: число 5
# 5 + 55 - 555 * 5555 = -3082965
#
# 4. Написать программу, которая принимает два аргумента: месяц и год в формате целых чисел, а на выходе возвращает календарь для переданных данных, например: 2019, 12 (декабрь 19-го года):
#    December 2019
# Mo Tu We Th Fr Sa Su
#                    1
#  2  3  4  5  6  7  8
#  9 10 11 12 13 14 15
# 16 17 18 19 20 21 22
# 23 24 25 26 27 28 29
# 30 31
#
# 5. Написать программу, которая принимает в качестве аргумента даты в строковом представлении и возвращает количество рабочих дней между ними (пн, вт, ср, чт, пт - рабочие дни, сб, вс - выходные). Пример  '2019_7_2', '2019_7_11' - 8 рабочих дней, включая эти даты.
#
# 6. Написать программу, которая будет считать квадратный корень переданного ей числа (нельзя использовать сторонние библиотеки).
#
# 7. Написать программу, которая будет принимать в качестве аргумента список с целыми числами и будет выводить на экран число дубликатов, которых больше других представлено в списке. Например: [1, 1, 2, 1, 2] = 3 (три единицы).
#
# 8. Напсать программу, которая принимать на входе список с числами и возвращать объединенное строковое представление этих числе в качестве результата. Например: [25, 6, 72, 4] -> '256724'
#
# 9. Написать программу, которая будет выводить список всех четных чисел, которые идут по списку после числа 237. Список - numbers = [
#     386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345,
#     399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217,
#     815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717,
#     958,743, 527]
#
# *10. Написать программу, которая принимает в качестве аргумента два списка и проверяет, является ли второй список "подмассивом" первого. Например: [1, 2, 3, 5, 8, 13, 42, 5, 8], [5, 8, 13, 42] -> True
#
#
#                                             4
# Задания:
# # 1: Написать программу, которая в качестве аргумента принимает объект данных datettime, необходимо найти сколько времени с времени переданного объекта в днях, часах, минутах.
#
# # 2: Написать программу, которая будет принимать в качестве аргумента список целых числе и выводить в качестве рузльтата максимальное количество возможных уникальных комбинаций, например:
# [2, 5, 8] -> (2, 5), (2, 8), (5, 8)
# [72, 586, 12] -> (72, 586), (72, 12), (586, 12)
#
# # 3: Программа в качестве аргументов принимает 10 разных строк, необходимо сосчитать количество наиболее частво встречаемых в переданных строках символовю.
#
# # 4: Написать программу, которая будет выводить все числа в диапазоне от 0 до 1000, которые делять на 7 без остатка.
#
# # 5: Написать программу, которая будет выводить на экран сумму всех чисел в диапазоне от 1 до 2000 у которых длинна представлена от 3 числа, например: 375, 687, 156, 111, а 6812 - нет и т.д.
#
# # 6: Подсчитать топ 10 наиболее встречающихся слов в https://www.gutenberg.org/files/1112/1112.txt
#
# # 7: Написать программу, которая будет генеририровать случайные строки, произвольной длинные в диапазоне от 1 до 4, в верхнем и нижнем регистре на вводимую пользователем длинну.
# Например 25: ['HT', 'rv', 'UL', 'mD', 'ad', 'Qw', 'ad', 'EX', 'Kn', 'kD', 'MI', 'ti', 'HB', 'Xk', 'ET', 'xO', 'lh', 'pg', 'VN', 'su', 'kc', 'iF', 'Bm', 'vK', 'Vd', 'wF', 'zh', 'Ph', 'KY', 'Go']
#
# # 8: Необходимо написать программу, которая сортирует список из примера задачи №7 игнорируя заглавные и строчные буквы в обратном порядке. Должно получиться:
# ['BH', 'ck', 'da', 'da', 'Dk', 'Dm', 'dV', 'Fi', 'Fw', 'gp', 'hl', 'hP', 'hz', 'IM', 'it', 'Kv', 'kX', 'LU', 'mB', 'nK', 'NV', 'oG', 'Ox', 'TE', 'TH', 'us', 'vr', 'wQ', 'XE', 'YK']
#
# # 9: Необходимо написать программу, которая будет генерировать случайную последовательность отсортированных чисел. Затем последовательно генерировать 5 случайных чисел и вставлять их в уже имеющийся список.
# [1, 6, 8, 10, 13]
# 2 -> [1, 2, 6, 8, 10, 13]
# 15 -> [1, 2, 6, 8, 10, 13, 15]
# 9 -> [1, 2, 6, 8, 9, 10, 13, 15]
#
# # 10: Написать программу, которая принимает список список [[3, 5, 8], [5, 8, 10], [1, 2], [2, 13, 9]], и выводит в качестве результата отсортированный список по сумме чисел подсписков в обратном порядке: [[2, 13, 9], [5, 8, 10], [3, 5, 8], [1, 2]]
#
# # 11*: Необходимо написать программу используя list comprehension, которая будет генерировать список словарей, каждый словарь которых содержит в качестве ключа случайную последовательность длинною от 1 до 5 заглавных символов, а в качестве значения список словарей, каждый их которых в свою очередь содержит две пары ключ-значение 'required' и 'selected' со случайными числами в диапазоне от 1 до 10 для 'required' и от 1, 6 для 'selected'. В общей сложности должен получиться список следующего вида:
#
# [{'PH': [{'required': 1, 'selected': 1}, {'required': 2, 'selected': 5}, {'required': 5, 'selected': 9}]}, {'XKEOG': [{'required': 3, 'selected': 1}]}, {'J': [{'required': 5, 'selected': 8}, {'required': 5, 'selected': 10}, {'required': 5, 'selected': 10}]}, {'NVQG': [{'required': 5, 'selected': 8}, {'required': 5, 'selected': 6}, {'required': 5, 'selected': 9}, {'required': 4, 'selected': 6}, {'required': 4, 'selected': 9}]}, {'XGDB': [{'required': 2, 'selected': 10}, {'required': 2, 'selected': 4}, {'required': 5, 'selected': 7}]}, {'DZXN': [{'required': 3, 'selected': 3}, {'required': 3, 'selected': 3}, {'required': 4, 'selected': 4}]}, {'Y': [{'required': 1, 'selected': 8}, {'required': 3, 'selected': 9}]}, {'V': [{'required': 1, 'selected': 8}]}, {'I': [{'required': 3, 'selected': 10}]}, {'YU': [{'required': 4, 'selected': 1}, {'required': 4, 'selected': 8}, {'required': 2, 'selected': 1}]}]
#
# # 12*: Необходимо написать программу используя list comprehension, которая будет фильтровать список словарей из задания № 11 и оставлять только те словари, у которых все вложенные последовательности выполняют требования, то есть каждый из них имеет selected > required. Результат:
# [{'PH': [{'required': 1, 'selected': 1}, {'required': 2, 'selected': 5}, {'required': 5, 'selected': 9}]}, {'J': [{'required': 5, 'selected': 8}, {'required': 5, 'selected': 10}, {'required': 5, 'selected': 10}]}, {'NVQG': [{'required': 5, 'selected': 8}, {'required': 5, 'selected': 6}, {'required': 5, 'selected': 9}, {'required': 4, 'selected': 6}, {'required': 4, 'selected': 9}]}, {'XGDB': [{'required': 2, 'selected': 10}, {'required': 2, 'selected': 4}, {'required': 5, 'selected': 7}]}, {'DZXN': [{'required': 3, 'selected': 3}, {'required': 3, 'selected': 3}, {'required': 4, 'selected': 4}]}, {'Y': [{'required': 1, 'selected': 8}, {'required': 3, 'selected': 9}]}, {'V': [{'required': 1, 'selected': 8}]}, {'I': [{'required': 3, 'selected': 10}]}]
#
#
#
#                                                 5
#
# # 1: Написать функцию, которая принимает неограниченное количество аргументов и возвращает второй по величине аргумент.


# # 2: Написать функцию, которая в качестве первого аргумента принимает число, а в качестве второго - словарь.
# # Программа должна возвращать True, если первый аргумент представлен в значения словаря и False, если нет. Пример:
# a = 5, b = {'foo': 5, 'bar': 8}
#
# # 3: Написать функцию, которая принимает неограниченное количество аргументов цифр, написанных прописью на английском языке и должна возвращать в качестве аргументов результат суммы в целочисленном представлении. Пример:
# ввод: "five", "six", результат 11. Допущение: функция должна быть расчитана на аргументы от 0 до 10 включительно.
#
# # 4**: Смысл тот же, что и взадании 3, только программа будет принимать последовательность аргументов которые помимо чисел принимают операторы, кроме того, числовой ряд будет от 0 до 100 включительно. Пример:
# "twenty one", "plus", "forty two", "minus", "four", "multiply", "five", рузультат: 21 + 42 - 4 * 5 = 43.
#
# # 5: Написать функцию, которая в качестве аргумента принимает строку и считает количество заглавных, строчных букв, знаков препинания и выводит их сумму. Пример: "Hello, Wolrd!", результат: upper: 2, lower: 8, space: 1, punctuation: 2.
#
# # 6: Написать функцию, которая принимает в качестве аргумента список и возвращает в качестве результата список с уникальными отсортированными значениями в обратном порядке. Пример: [19, 12, 4, 12, 7, 9, 5, 8, 3, 17, 8, 19, 12, 3, 6, 15, 15, 16, 11, 13, 19, 16, 11, 12, 20, 2, 16, 7, 15, 2, 6, 15, 17, 15, 19, 4, 13, 14, 6, 5, 12, 2, 20, 7, 19, 4, 15, 16, 7, 20], результат: [20, 19, 17, 16, 15, 14, 13, 12, 11, 9, 8, 7, 6, 5, 4, 3, 2]
#
# # 7: Написать функцию, которая принимает в качестве аргумента число и возвращает True, если это число делиться без остатка только на себя и на единицу и False, если нет.
# 11 - True,
# 12 - False,
# 13 - True,
# 18 - Flase,
# 23 - True.
#
# # 8: Написать функцию, которая принимает в качестве аргумента строку и возвращает True, если эта строка "зеркальная". Пример:
# abba - True
# hello, world! = False
# radar - True
#
# # 9: Написать функцию декоратор, которая считает время выполнения программы и выводит его на экран.
#
# # 10: Написать рекурсивную функцию, которая бы считала сумму ряда чисел от 1 до переданного ей в качестве аргумента числа. Пример: ввод: 4, результат: 1 + 2 + 3 + 4 = 10.
#
# # 11: Написать рекурсивную функцию, которая будет считать произведение переданного ей в качестве аргумента список целых чисел. Пример: ввод: [42, 78, 113], результат: 42 * 72 * 113 = 341712.