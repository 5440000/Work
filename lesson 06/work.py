# String
# неизменяемая
# последовательная - есть индекс . (есть еще обратный индекс со знакос -2)
# упорядоченная
# последовательность
#
#
# \n новая строка
# \t табуляция
#
# mutable and immutable изменяемые и неизменяемые
# a = 'qwerty'
# a = a[:2] + 'X' + a[3:]
# #ответ будет а = qwXerty
#
# символы - это строка длинной в один эллемент
# как появился юникод - юникод это стандарт. Юникод представляют связь между символами и каким то числом.
#
# Конкатенация строк это соеднение или добавление двух объектов вместе иными словами это объединение
#
# Функции и методы строк
# example = ' asdfd lkjldf lkjdsflkj asdfjklk alskdf jsldkfj '
# example_2 = '234235'
# example_3
#
# print(example.isalpha())    все ли символы
# islower  роверят все ли символы в строке являются в нижнем регистре
# isupper
# isdigit проверяет все ли символы в строке являются числами
# isnumeric является ли вся строка числом
# startswith  проверяет начинается ли строка с большой буквы. Возвращает тру или фолс
# str.startswith('wird', 6, 200) озможно передача выбранного диапазона
# str.endswith()проверяет заканчивается ли строка
#
# print('hello'.lower()) делает все регистры нижними
# print('hello'.upper()) делает все регистры верхними
# print('hello'.capitalize()) делает все регистры ...
# t_string = '        hello, world'
# str.lstrip()
# str.rstrip()
# str.ljust(60) выравнивает по левому краю на количество символов указанному в скобке
# str.rjust()
#
# str.find('a') ищет букву и возвращает индекс ее гахождения
# о же самое можно делать со словами
#
# str.replace(' ', 'x') ищет пробелы и меняет на указанный символ
#
# str.split() разделяет строку если находит пробел
# str.split('a') разбивает строку на букву а
#
# str.join() может объединять строки
#
#
# РЕГУЛЯРНЫЕ ВЫРАЖЕНИЯ regex101.com  сайт который формирует паттерн и имеет возможность проверки параметров аргумента
#
#
# это последовательность символов используемые для поиска и замены текста в строке или
# регуляирные выражения используют два типа символов
# - спец символы
# - литералы
#
# import re #стандартная библиотека пайтон
#
# res = re.match(r'Lorem', example)
# print(res)
# re.search() будет находить первые переданные ей эллементы по всей последовательности
# re.findall() будет находить все переданные ей эллементы по всей последовательности
# re.split(r"X", example) r -rollstring - она позволяет вырубать экранированные последовательности
# pattern = шаблон в котором описаны обхеккты
#
# print(re.findall(r''. '12314321342341'))
# print(re.findall(r'\d'. '12314321342341'))   \d все цифры

file = open('путь к файлу' )
file.close()

после открытия и работы с файлом его необходимо закрыть для освобождения оперативной
Если этого не сделать то произойдёт утечка памяти в результате этого оперативная память забьётся и всё перестанет

контекстные менеджеры

with open(path, 'r') as file:
    file.read()
